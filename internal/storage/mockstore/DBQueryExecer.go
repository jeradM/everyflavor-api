// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate using `make store_mocks`

package mocks

import (
	driver "database/sql/driver"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// DBQueryExecer is an autogenerated mock type for the DBQueryExecer type
type DBQueryExecer struct {
	mock.Mock
}

// Enable provides a mock function with given fields: _a0
func (_m *DBQueryExecer) Enable(_a0 bool) {
	_m.Called(_a0)
}

// Exec provides a mock function with given fields: _a0, _a1
func (_m *DBQueryExecer) Exec(_a0 string, _a1 []interface{}) (driver.Result, error) {
	ret := _m.Called(_a0, _a1)

	var r0 driver.Result
	if rf, ok := ret.Get(0).(func(string, []interface{}) driver.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecWithTX provides a mock function with given fields: _a0, _a1, _a2
func (_m *DBQueryExecer) ExecWithTX(_a0 sqlx.Execer, _a1 string, _a2 []interface{}) (driver.Result, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 driver.Result
	if rf, ok := ret.Get(0).(func(sqlx.Execer, string, []interface{}) driver.Result); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sqlx.Execer, string, []interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1, _a2
func (_m *DBQueryExecer) Get(_a0 interface{}, _a1 string, _a2 []interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, []interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWithTX provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DBQueryExecer) GetWithTX(_a0 sqlx.Queryer, _a1 interface{}, _a2 string, _a3 []interface{}) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(sqlx.Queryer, interface{}, string, []interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: _a0, _a1, _a2
func (_m *DBQueryExecer) Select(_a0 interface{}, _a1 string, _a2 []interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, []interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectWithTX provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *DBQueryExecer) SelectWithTX(_a0 sqlx.Queryer, _a1 interface{}, _a2 string, _a3 []interface{}) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(sqlx.Queryer, interface{}, string, []interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
