// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate using `make store_mocks`

package mocks

import (
	model "everyflavor/internal/storage/model"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// VendorStore is an autogenerated mock type for the VendorStore type
type VendorStore struct {
	mock.Mock
}

// FindByAbbreviation provides a mock function with given fields: _a0
func (_m *VendorStore) FindByAbbreviation(_a0 string) (*model.Vendor, error) {
	ret := _m.Called(_a0)

	var r0 *model.Vendor
	if rf, ok := ret.Get(0).(func(string) *model.Vendor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vendor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: _a0
func (_m *VendorStore) FindByName(_a0 string) (*model.Vendor, error) {
	ret := _m.Called(_a0)

	var r0 *model.Vendor
	if rf, ok := ret.Get(0).(func(string) *model.Vendor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vendor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *VendorStore) Get(_a0 uint64) (*model.Vendor, error) {
	ret := _m.Called(_a0)

	var r0 *model.Vendor
	if rf, ok := ret.Get(0).(func(uint64) *model.Vendor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vendor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *VendorStore) Insert(_a0 *model.Vendor, _a1 sqlx.Execer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Vendor, sqlx.Execer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *VendorStore) List() ([]model.Vendor, uint64, error) {
	ret := _m.Called()

	var r0 []model.Vendor
	if rf, ok := ret.Get(0).(func() []model.Vendor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Vendor)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func() uint64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *VendorStore) Update(_a0 *model.Vendor, _a1 sqlx.Execer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Vendor, sqlx.Execer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
