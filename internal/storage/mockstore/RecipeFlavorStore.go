// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate using `make store_mocks`

package mocks

import (
	model "everyflavor/internal/storage/model"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// RecipeFlavorStore is an autogenerated mock type for the RecipeFlavorStore type
type RecipeFlavorStore struct {
	mock.Mock
}

// DeleteAllByRecipeID provides a mock function with given fields: _a0, _a1
func (_m *RecipeFlavorStore) DeleteAllByRecipeID(_a0 uint64, _a1 sqlx.Execer) (int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64, sqlx.Execer) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, sqlx.Execer) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *RecipeFlavorStore) Get(_a0 uint64) (*model.RecipeFlavor, error) {
	ret := _m.Called(_a0)

	var r0 *model.RecipeFlavor
	if rf, ok := ret.Get(0).(func(uint64) *model.RecipeFlavor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RecipeFlavor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *RecipeFlavorStore) Insert(_a0 *model.RecipeFlavor, _a1 sqlx.Execer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RecipeFlavor, sqlx.Execer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: _a0
func (_m *RecipeFlavorStore) List(_a0 model.RecipeFlavorParams) ([]model.RecipeFlavor, error) {
	ret := _m.Called(_a0)

	var r0 []model.RecipeFlavor
	if rf, ok := ret.Get(0).(func(model.RecipeFlavorParams) []model.RecipeFlavor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RecipeFlavor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RecipeFlavorParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Replace provides a mock function with given fields: _a0, _a1, _a2
func (_m *RecipeFlavorStore) Replace(_a0 uint64, _a1 []model.RecipeFlavor, _a2 sqlx.Execer) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []model.RecipeFlavor, sqlx.Execer) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *RecipeFlavorStore) Update(_a0 *model.RecipeFlavor, _a1 sqlx.Execer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RecipeFlavor, sqlx.Execer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
