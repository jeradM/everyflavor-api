// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate using `make store_mocks`

package mocks

import (
	model "everyflavor/internal/storage/model"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// RecipeStore is an autogenerated mock type for the RecipeStore type
type RecipeStore struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: _a0
func (_m *RecipeStore) AddComment(_a0 *model.RecipeComment) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RecipeComment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ByUUID provides a mock function with given fields: _a0
func (_m *RecipeStore) ByUUID(_a0 string) (*model.Recipe, error) {
	ret := _m.Called(_a0)

	var r0 *model.Recipe
	if rf, ok := ret.Get(0).(func(string) *model.Recipe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *RecipeStore) Get(_a0 uint64) (*model.Recipe, error) {
	ret := _m.Called(_a0)

	var r0 *model.Recipe
	if rf, ok := ret.Get(0).(func(uint64) *model.Recipe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *RecipeStore) Insert(_a0 *model.Recipe, _a1 sqlx.Ext) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Recipe, sqlx.Ext) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertRating provides a mock function with given fields: _a0, _a1
func (_m *RecipeStore) InsertRating(_a0 *model.RecipeRating, _a1 sqlx.Execer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RecipeRating, sqlx.Execer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: _a0
func (_m *RecipeStore) List(_a0 *model.RecipeParams) ([]model.Recipe, uint64, error) {
	ret := _m.Called(_a0)

	var r0 []model.Recipe
	if rf, ok := ret.Get(0).(func(*model.RecipeParams) []model.Recipe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Recipe)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(*model.RecipeParams) uint64); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*model.RecipeParams) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCollaborators provides a mock function with given fields: _a0
func (_m *RecipeStore) ListCollaborators(_a0 model.RecipeCollaboratorParams) ([]model.RecipeCollaborator, error) {
	ret := _m.Called(_a0)

	var r0 []model.RecipeCollaborator
	if rf, ok := ret.Get(0).(func(model.RecipeCollaboratorParams) []model.RecipeCollaborator); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RecipeCollaborator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RecipeCollaboratorParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlavors provides a mock function with given fields: _a0
func (_m *RecipeStore) ListFlavors(_a0 model.RecipeFlavorParams) ([]model.RecipeFlavor, error) {
	ret := _m.Called(_a0)

	var r0 []model.RecipeFlavor
	if rf, ok := ret.Get(0).(func(model.RecipeFlavorParams) []model.RecipeFlavor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RecipeFlavor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RecipeFlavorParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: _a0
func (_m *RecipeStore) ListTags(_a0 model.RecipeTagParams) ([]model.RecipeTag, error) {
	ret := _m.Called(_a0)

	var r0 []model.RecipeTag
	if rf, ok := ret.Get(0).(func(model.RecipeTagParams) []model.RecipeTag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RecipeTag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.RecipeTagParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceCollaborators provides a mock function with given fields: recipeID, collabs, tx
func (_m *RecipeStore) ReplaceCollaborators(recipeID uint64, collabs []model.RecipeCollaborator, tx sqlx.Execer) error {
	ret := _m.Called(recipeID, collabs, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []model.RecipeCollaborator, sqlx.Execer) error); ok {
		r0 = rf(recipeID, collabs, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceFlavors provides a mock function with given fields: recipeID, flavors, tx
func (_m *RecipeStore) ReplaceFlavors(recipeID uint64, flavors []model.RecipeFlavor, tx sqlx.Execer) error {
	ret := _m.Called(recipeID, flavors, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []model.RecipeFlavor, sqlx.Execer) error); ok {
		r0 = rf(recipeID, flavors, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceTags provides a mock function with given fields: recipeID, tags, tx
func (_m *RecipeStore) ReplaceTags(recipeID uint64, tags []model.RecipeTag, tx sqlx.Execer) error {
	ret := _m.Called(recipeID, tags, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []model.RecipeTag, sqlx.Execer) error); ok {
		r0 = rf(recipeID, tags, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *RecipeStore) Update(_a0 *model.Recipe, _a1 sqlx.Ext) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Recipe, sqlx.Ext) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
