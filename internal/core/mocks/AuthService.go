// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate with `make core_mocks`

package mocks

import (
	model "everyflavor/internal/storage/model"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CanEditBatch provides a mock function with given fields: userID, batchID
func (_m *AuthService) CanEditBatch(userID uint64, batchID uint64) (bool, error) {
	ret := _m.Called(userID, batchID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, batchID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, batchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanEditRecipe provides a mock function with given fields: userID, recipeID
func (_m *AuthService) CanEditRecipe(userID uint64, recipeID uint64) (bool, error) {
	ret := _m.Called(userID, recipeID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, recipeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, recipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanViewBatch provides a mock function with given fields: userID, batchID
func (_m *AuthService) CanViewBatch(userID uint64, batchID uint64) (bool, error) {
	ret := _m.Called(userID, batchID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, batchID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, batchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanViewRecipe provides a mock function with given fields: userID, recipeID
func (_m *AuthService) CanViewRecipe(userID uint64, recipeID uint64) (bool, error) {
	ret := _m.Called(userID, recipeID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, uint64) bool); ok {
		r0 = rf(userID, recipeID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(userID, recipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPublic provides a mock function with given fields: _a0, _a1
func (_m *AuthService) IsPublic(_a0 uint64, _a1 model.PublishableEntity) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, model.PublishableEntity) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, model.PublishableEntity) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
