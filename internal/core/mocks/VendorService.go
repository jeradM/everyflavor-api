// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate with `make core_mocks`

package mocks

import (
	model "everyflavor/internal/storage/model"

	mock "github.com/stretchr/testify/mock"
)

// VendorService is an autogenerated mock type for the VendorService type
type VendorService struct {
	mock.Mock
}

// GetVendorByAbbreviation provides a mock function with given fields: abbrev
func (_m *VendorService) GetVendorByAbbreviation(abbrev string) (*model.Vendor, error) {
	ret := _m.Called(abbrev)

	var r0 *model.Vendor
	if rf, ok := ret.Get(0).(func(string) *model.Vendor); ok {
		r0 = rf(abbrev)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vendor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(abbrev)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVendorByID provides a mock function with given fields: id
func (_m *VendorService) GetVendorByID(id uint64) (*model.Vendor, error) {
	ret := _m.Called(id)

	var r0 *model.Vendor
	if rf, ok := ret.Get(0).(func(uint64) *model.Vendor); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vendor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVendorByName provides a mock function with given fields: name
func (_m *VendorService) GetVendorByName(name string) (*model.Vendor, error) {
	ret := _m.Called(name)

	var r0 *model.Vendor
	if rf, ok := ret.Get(0).(func(string) *model.Vendor); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vendor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVendorsList provides a mock function with given fields:
func (_m *VendorService) GetVendorsList() ([]model.Vendor, error) {
	ret := _m.Called()

	var r0 []model.Vendor
	if rf, ok := ret.Get(0).(func() []model.Vendor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Vendor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveVendor provides a mock function with given fields: v
func (_m *VendorService) SaveVendor(v *model.Vendor) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Vendor) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
