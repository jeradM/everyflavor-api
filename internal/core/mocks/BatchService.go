// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate with `make core_mocks`

package mocks

import (
	model "everyflavor/internal/storage/model"

	mock "github.com/stretchr/testify/mock"

	view "everyflavor/internal/http/api/v1/view"
)

// BatchService is an autogenerated mock type for the BatchService type
type BatchService struct {
	mock.Mock
}

// GetBatch provides a mock function with given fields: _a0
func (_m *BatchService) GetBatch(_a0 uint64) (*view.Batch, error) {
	ret := _m.Called(_a0)

	var r0 *view.Batch
	if rf, ok := ret.Get(0).(func(uint64) *view.Batch); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*view.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBatchesForUser provides a mock function with given fields: ownerId
func (_m *BatchService) GetBatchesForUser(ownerId uint64) ([]model.Batch, error) {
	ret := _m.Called(ownerId)

	var r0 []model.Batch
	if rf, ok := ret.Get(0).(func(uint64) []model.Batch); ok {
		r0 = rf(ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBatch provides a mock function with given fields: b
func (_m *BatchService) SaveBatch(b view.Batch) (view.Batch, error) {
	ret := _m.Called(b)

	var r0 view.Batch
	if rf, ok := ret.Get(0).(func(view.Batch) view.Batch); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(view.Batch)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(view.Batch) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
