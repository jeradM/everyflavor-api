// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate with `make core_mocks`

package mocks

import (
	view "everyflavor/internal/http/api/v1/view"

	mock "github.com/stretchr/testify/mock"
)

// FlavorService is an autogenerated mock type for the FlavorService type
type FlavorService struct {
	mock.Mock
}

// GetFlavorByID provides a mock function with given fields: _a0
func (_m *FlavorService) GetFlavorByID(_a0 uint64) (view.Flavor, error) {
	ret := _m.Called(_a0)

	var r0 view.Flavor
	if rf, ok := ret.Get(0).(func(uint64) view.Flavor); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(view.Flavor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlavorsList provides a mock function with given fields:
func (_m *FlavorService) GetFlavorsList() (view.ListResult, error) {
	ret := _m.Called()

	var r0 view.ListResult
	if rf, ok := ret.Get(0).(func() view.ListResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(view.ListResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStashForUser provides a mock function with given fields: _a0
func (_m *FlavorService) GetStashForUser(_a0 uint64) ([]view.FlavorStash, error) {
	ret := _m.Called(_a0)

	var r0 []view.FlavorStash
	if rf, ok := ret.Get(0).(func(uint64) []view.FlavorStash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]view.FlavorStash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFlavor provides a mock function with given fields: _a0
func (_m *FlavorService) SaveFlavor(_a0 view.Flavor) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(view.Flavor) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveStash provides a mock function with given fields: _a0
func (_m *FlavorService) SaveStash(_a0 view.FlavorStash) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(view.FlavorStash) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
