// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Regenerate with `make core_mocks`

package mocks

import (
	model "everyflavor/internal/storage/model"

	mock "github.com/stretchr/testify/mock"

	view "everyflavor/internal/http/api/v1/view"
)

// RecipeService is an autogenerated mock type for the RecipeService type
type RecipeService struct {
	mock.Mock
}

// AddRecipeRating provides a mock function with given fields: _a0, _a1
func (_m *RecipeService) AddRecipeRating(_a0 uint64, _a1 view.RecipeRating) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, view.RecipeRating) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecipeByID provides a mock function with given fields: _a0
func (_m *RecipeService) GetRecipeByID(_a0 uint64) (*view.Recipe, error) {
	ret := _m.Called(_a0)

	var r0 *view.Recipe
	if rf, ok := ret.Get(0).(func(uint64) *view.Recipe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*view.Recipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipeByUUID provides a mock function with given fields: _a0
func (_m *RecipeService) GetRecipeByUUID(_a0 string) (*view.Recipe, error) {
	ret := _m.Called(_a0)

	var r0 *view.Recipe
	if rf, ok := ret.Get(0).(func(string) *view.Recipe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*view.Recipe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecipesList provides a mock function with given fields: _a0
func (_m *RecipeService) GetRecipesList(_a0 *model.RecipeParams) (view.ListResult, error) {
	ret := _m.Called(_a0)

	var r0 view.ListResult
	if rf, ok := ret.Get(0).(func(*model.RecipeParams) view.ListResult); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(view.ListResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.RecipeParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRecipe provides a mock function with given fields: _a0
func (_m *RecipeService) SaveRecipe(_a0 view.Recipe) (view.Recipe, error) {
	ret := _m.Called(_a0)

	var r0 view.Recipe
	if rf, ok := ret.Get(0).(func(view.Recipe) view.Recipe); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(view.Recipe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(view.Recipe) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecipe provides a mock function with given fields: _a0
func (_m *RecipeService) UpdateRecipe(_a0 view.Recipe) (view.Recipe, error) {
	ret := _m.Called(_a0)

	var r0 view.Recipe
	if rf, ok := ret.Get(0).(func(view.Recipe) view.Recipe); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(view.Recipe)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(view.Recipe) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
